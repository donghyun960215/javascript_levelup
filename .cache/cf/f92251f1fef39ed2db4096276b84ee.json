{"id":"js/array.js","dependencies":[{"name":"/Users/donghyun/Desktop/프론트엔드/연습/javascript_levelup/package.json","includedInParent":true,"mtime":1673443914100}],"generated":{"js":"var numbers = [1, 2, 3, 4];\nvar fruits = ['Apple', 'Banana', 'Cherry'];\n\n// .length()\n// 배열 안에 갯수확인\n// console.log(numbers.length)\n// console.log(fruits.length)\n// console.log([1,2].length)\n// console.log([].length)\n\n// .concat()\n// 원본에 배열데이터에는 손상이 없으며 합쳐져서 새로운 배열데이터가 생긴다\n// console.log(numbers.concat(fruits))\n// console.log(numbers)\n// console.log(fruits)\n\n//.forEach()\n//.forEach메소드가 붙어있는 배열데이터의 아이템갯수 만큼 콜백함수가 반복적으로 실행된다.\n// 따로 반환되는 값은 없다.\n// fruits.forEach(function (item, index, array) {\n//   console.log(item, index ,array)\n// })\n\n// .map\n// 인수로 사용하는 콜백에 내부에서 반환하는 하나의 데이터를 가지고\n// 그 데이터드를 모아놓은 새로운 데이터를 만들어 반환한다. 원본 데이터의 변환 없이.\n// const a = fruits.forEach(function (fruit, index) {\n//   console.log(`${fruit} - ${index}`)\n// })\n// console.log(a)\n\n// const b = fruits.map(function (fruit, index){\n//   // return `${fruit} - ${index}`\n//   return {\n//   id: index,\n//   name: fruit\n//   }\n// })\n// console.log(b)\n\n// 화살표 함수 사용 \n// const a = fruits.forEach( (fruit, index) => {\n//   console.log(`${fruit} - ${index}`)\n// })\n// console.log(a)\n\n// const b = fruits.map( (fruit, index) => ({\n//   id: index,\n//   name: fruit\n//   }))\n// console.log(b)\n\n// .filter()\n// 배열데이터 안에 들어있는 각각의 아이템들을 특정한 기준에 의해서 필터링을 한다\n// 원본데이터의 변화없이 필터된 새로운 데이터를 반환한다\n// \n// const a = numbers.map(number => number < 3)\n// console.log(a)\n// const b = numbers.filter(number => number < 3)\n// console.log(b)\n\n// .find() findIndex()\n// .find() 콜백 내에서 몬가를 찾으면 반복이 멈춘다. 그 찾아진 배열의 아이템이 반환이된다.\n// .findIndex() 찾아진 배열의 index 반환\n// const a = fruits.find(function(fruit){\n//   return /^C/.test(fruit)\n// })\n// console.log(a)\n// const b = fruits.findIndex(fruit =>  /^C/.test(fruit))\n// console.log(b)\n\n// .includes()\n// 배열데이터 부분에 인수로사용된 특정한데이터가 포함이 되어있는지 확인하는메소드\n// const a = numbers.includes(3)\n// console.log(a)\n// const b = fruits.includes('Dong')\n// console.log(b)\n\n// .push() .unshift()\n// 원본 수정됨 주의!!!\n// .push() 사용되는 배열에 가장 뒤에 특정한 인수 내용을 밀어 넣는다.\n// .unshift() 사용되는 배열에 가장 앞에 특정한 인수 내용을 밀어 넣는다.\n// numbers.push(5)\n// console.log(numbers)\n// numbers.unshift(0)\n// console.log(numbers)\n\n// .reverse()\n// 원본 수정됨 주의!\n// 배열데이터를 거꾸로 뒤집는다.\n// numbers.reverse()\n// fruits.reverse()\n// console.log(numbers)\n// console.log(fruits)\n\n// .splice()\n// 원본 수정됨 주의!\n\n// 첫번째 인수 번호에서 아이템 두번째인수만큼 지워라\n// numbers.splice(2, 1)\n// 인덱스 번호 2번에서 아이템을 1개만 지워라\n\n// numbers.splice(2, 0, 999)\n// 인덱스 번호 2번에서 아이템을 0개만 지워라(변환없음),그리고 999를 끼워넣어라\n\n//특정한 인덱스 번호의 아이템을 제거하는 용도로도 사용되는데 그 자리에다가 끼워넣는 용도로 \n// 사용도 가능하다\n\n// console.log(numbers)\n\n// fruits.splice(2, 0, 'dong')\n// console.log(fruits)"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/array.js","original":{"line":1,"column":0}},{"generated":{"line":1,"column":4},"source":"js/array.js","original":{"line":1,"column":6},"name":"numbers"},{"generated":{"line":1,"column":11},"source":"js/array.js","original":{"line":1,"column":13}},{"generated":{"line":1,"column":14},"source":"js/array.js","original":{"line":1,"column":16}},{"generated":{"line":1,"column":15},"source":"js/array.js","original":{"line":1,"column":17}},{"generated":{"line":1,"column":16},"source":"js/array.js","original":{"line":1,"column":18}},{"generated":{"line":1,"column":18},"source":"js/array.js","original":{"line":1,"column":20}},{"generated":{"line":1,"column":19},"source":"js/array.js","original":{"line":1,"column":21}},{"generated":{"line":1,"column":21},"source":"js/array.js","original":{"line":1,"column":23}},{"generated":{"line":1,"column":22},"source":"js/array.js","original":{"line":1,"column":24}},{"generated":{"line":1,"column":24},"source":"js/array.js","original":{"line":1,"column":26}},{"generated":{"line":1,"column":25},"source":"js/array.js","original":{"line":1,"column":27}},{"generated":{"line":1,"column":26},"source":"js/array.js","original":{"line":1,"column":28}},{"generated":{"line":2,"column":0},"source":"js/array.js","original":{"line":2,"column":0}},{"generated":{"line":2,"column":4},"source":"js/array.js","original":{"line":2,"column":6},"name":"fruits"},{"generated":{"line":2,"column":10},"source":"js/array.js","original":{"line":2,"column":12}},{"generated":{"line":2,"column":13},"source":"js/array.js","original":{"line":2,"column":15}},{"generated":{"line":2,"column":14},"source":"js/array.js","original":{"line":2,"column":16}},{"generated":{"line":2,"column":21},"source":"js/array.js","original":{"line":2,"column":23}},{"generated":{"line":2,"column":23},"source":"js/array.js","original":{"line":2,"column":24}},{"generated":{"line":2,"column":31},"source":"js/array.js","original":{"line":2,"column":32}},{"generated":{"line":2,"column":33},"source":"js/array.js","original":{"line":2,"column":34}},{"generated":{"line":2,"column":41},"source":"js/array.js","original":{"line":2,"column":42}},{"generated":{"line":2,"column":42},"source":"js/array.js","original":{"line":2,"column":43}},{"generated":{"line":4,"column":0},"source":"js/array.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"js/array.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"js/array.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"js/array.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"js/array.js","original":{"line":8,"column":0}},{"generated":{"line":9,"column":0},"source":"js/array.js","original":{"line":9,"column":0}},{"generated":{"line":11,"column":0},"source":"js/array.js","original":{"line":12,"column":0}},{"generated":{"line":12,"column":0},"source":"js/array.js","original":{"line":13,"column":0}},{"generated":{"line":13,"column":0},"source":"js/array.js","original":{"line":14,"column":0}},{"generated":{"line":14,"column":0},"source":"js/array.js","original":{"line":15,"column":0}},{"generated":{"line":15,"column":0},"source":"js/array.js","original":{"line":16,"column":0}},{"generated":{"line":17,"column":0},"source":"js/array.js","original":{"line":19,"column":0}},{"generated":{"line":18,"column":0},"source":"js/array.js","original":{"line":20,"column":0}},{"generated":{"line":19,"column":0},"source":"js/array.js","original":{"line":21,"column":0}},{"generated":{"line":20,"column":0},"source":"js/array.js","original":{"line":22,"column":0}},{"generated":{"line":21,"column":0},"source":"js/array.js","original":{"line":23,"column":0}},{"generated":{"line":22,"column":0},"source":"js/array.js","original":{"line":24,"column":0}},{"generated":{"line":24,"column":0},"source":"js/array.js","original":{"line":27,"column":0}},{"generated":{"line":25,"column":0},"source":"js/array.js","original":{"line":28,"column":0}},{"generated":{"line":26,"column":0},"source":"js/array.js","original":{"line":29,"column":0}},{"generated":{"line":27,"column":0},"source":"js/array.js","original":{"line":30,"column":0}},{"generated":{"line":28,"column":0},"source":"js/array.js","original":{"line":31,"column":0}},{"generated":{"line":29,"column":0},"source":"js/array.js","original":{"line":32,"column":0}},{"generated":{"line":30,"column":0},"source":"js/array.js","original":{"line":33,"column":0}},{"generated":{"line":32,"column":0},"source":"js/array.js","original":{"line":35,"column":0}},{"generated":{"line":33,"column":0},"source":"js/array.js","original":{"line":36,"column":0}},{"generated":{"line":34,"column":0},"source":"js/array.js","original":{"line":37,"column":0}},{"generated":{"line":35,"column":0},"source":"js/array.js","original":{"line":38,"column":0}},{"generated":{"line":36,"column":0},"source":"js/array.js","original":{"line":39,"column":0}},{"generated":{"line":37,"column":0},"source":"js/array.js","original":{"line":40,"column":0}},{"generated":{"line":38,"column":0},"source":"js/array.js","original":{"line":41,"column":0}},{"generated":{"line":39,"column":0},"source":"js/array.js","original":{"line":42,"column":0}},{"generated":{"line":41,"column":0},"source":"js/array.js","original":{"line":46,"column":0}},{"generated":{"line":42,"column":0},"source":"js/array.js","original":{"line":47,"column":0}},{"generated":{"line":43,"column":0},"source":"js/array.js","original":{"line":48,"column":0}},{"generated":{"line":44,"column":0},"source":"js/array.js","original":{"line":49,"column":0}},{"generated":{"line":45,"column":0},"source":"js/array.js","original":{"line":50,"column":0}},{"generated":{"line":47,"column":0},"source":"js/array.js","original":{"line":52,"column":0}},{"generated":{"line":48,"column":0},"source":"js/array.js","original":{"line":53,"column":0}},{"generated":{"line":49,"column":0},"source":"js/array.js","original":{"line":54,"column":0}},{"generated":{"line":50,"column":0},"source":"js/array.js","original":{"line":55,"column":0}},{"generated":{"line":51,"column":0},"source":"js/array.js","original":{"line":56,"column":0}},{"generated":{"line":53,"column":0},"source":"js/array.js","original":{"line":60,"column":0}},{"generated":{"line":54,"column":0},"source":"js/array.js","original":{"line":61,"column":0}},{"generated":{"line":55,"column":0},"source":"js/array.js","original":{"line":62,"column":0}},{"generated":{"line":56,"column":0},"source":"js/array.js","original":{"line":63,"column":0}},{"generated":{"line":57,"column":0},"source":"js/array.js","original":{"line":64,"column":0}},{"generated":{"line":58,"column":0},"source":"js/array.js","original":{"line":65,"column":0}},{"generated":{"line":59,"column":0},"source":"js/array.js","original":{"line":66,"column":0}},{"generated":{"line":60,"column":0},"source":"js/array.js","original":{"line":67,"column":0}},{"generated":{"line":62,"column":0},"source":"js/array.js","original":{"line":71,"column":0}},{"generated":{"line":63,"column":0},"source":"js/array.js","original":{"line":72,"column":0}},{"generated":{"line":64,"column":0},"source":"js/array.js","original":{"line":73,"column":0}},{"generated":{"line":65,"column":0},"source":"js/array.js","original":{"line":74,"column":0}},{"generated":{"line":66,"column":0},"source":"js/array.js","original":{"line":75,"column":0}},{"generated":{"line":67,"column":0},"source":"js/array.js","original":{"line":76,"column":0}},{"generated":{"line":68,"column":0},"source":"js/array.js","original":{"line":77,"column":0}},{"generated":{"line":69,"column":0},"source":"js/array.js","original":{"line":78,"column":0}},{"generated":{"line":70,"column":0},"source":"js/array.js","original":{"line":79,"column":0}},{"generated":{"line":72,"column":0},"source":"js/array.js","original":{"line":83,"column":0}},{"generated":{"line":73,"column":0},"source":"js/array.js","original":{"line":84,"column":0}},{"generated":{"line":74,"column":0},"source":"js/array.js","original":{"line":85,"column":0}},{"generated":{"line":75,"column":0},"source":"js/array.js","original":{"line":86,"column":0}},{"generated":{"line":76,"column":0},"source":"js/array.js","original":{"line":87,"column":0}},{"generated":{"line":77,"column":0},"source":"js/array.js","original":{"line":88,"column":0}},{"generated":{"line":79,"column":0},"source":"js/array.js","original":{"line":92,"column":0}},{"generated":{"line":80,"column":0},"source":"js/array.js","original":{"line":93,"column":0}},{"generated":{"line":81,"column":0},"source":"js/array.js","original":{"line":94,"column":0}},{"generated":{"line":82,"column":0},"source":"js/array.js","original":{"line":95,"column":0}},{"generated":{"line":83,"column":0},"source":"js/array.js","original":{"line":96,"column":0}},{"generated":{"line":84,"column":0},"source":"js/array.js","original":{"line":97,"column":0}},{"generated":{"line":85,"column":0},"source":"js/array.js","original":{"line":98,"column":0}},{"generated":{"line":86,"column":0},"source":"js/array.js","original":{"line":99,"column":0}},{"generated":{"line":88,"column":0},"source":"js/array.js","original":{"line":103,"column":0}},{"generated":{"line":89,"column":0},"source":"js/array.js","original":{"line":104,"column":0}},{"generated":{"line":90,"column":0},"source":"js/array.js","original":{"line":105,"column":0}},{"generated":{"line":91,"column":0},"source":"js/array.js","original":{"line":106,"column":0}},{"generated":{"line":92,"column":0},"source":"js/array.js","original":{"line":107,"column":0}},{"generated":{"line":93,"column":0},"source":"js/array.js","original":{"line":108,"column":0}},{"generated":{"line":94,"column":0},"source":"js/array.js","original":{"line":109,"column":0}},{"generated":{"line":96,"column":0},"source":"js/array.js","original":{"line":113,"column":0}},{"generated":{"line":97,"column":0},"source":"js/array.js","original":{"line":114,"column":0}},{"generated":{"line":99,"column":0},"source":"js/array.js","original":{"line":116,"column":0}},{"generated":{"line":100,"column":0},"source":"js/array.js","original":{"line":117,"column":0}},{"generated":{"line":101,"column":0},"source":"js/array.js","original":{"line":118,"column":0}},{"generated":{"line":103,"column":0},"source":"js/array.js","original":{"line":120,"column":0}},{"generated":{"line":104,"column":0},"source":"js/array.js","original":{"line":121,"column":0}},{"generated":{"line":106,"column":0},"source":"js/array.js","original":{"line":123,"column":0}},{"generated":{"line":107,"column":0},"source":"js/array.js","original":{"line":124,"column":0}},{"generated":{"line":109,"column":0},"source":"js/array.js","original":{"line":126,"column":0}},{"generated":{"line":111,"column":0},"source":"js/array.js","original":{"line":128,"column":0}},{"generated":{"line":112,"column":0},"source":"js/array.js","original":{"line":129,"column":0}}],"sources":{"js/array.js":"const numbers = [1, 2, 3, 4]\nconst fruits = ['Apple','Banana', 'Cherry']\n\n// .length()\n// 배열 안에 갯수확인\n// console.log(numbers.length)\n// console.log(fruits.length)\n// console.log([1,2].length)\n// console.log([].length)\n\n\n// .concat()\n// 원본에 배열데이터에는 손상이 없으며 합쳐져서 새로운 배열데이터가 생긴다\n// console.log(numbers.concat(fruits))\n// console.log(numbers)\n// console.log(fruits)\n\n\n//.forEach()\n//.forEach메소드가 붙어있는 배열데이터의 아이템갯수 만큼 콜백함수가 반복적으로 실행된다.\n// 따로 반환되는 값은 없다.\n// fruits.forEach(function (item, index, array) {\n//   console.log(item, index ,array)\n// })\n\n\n// .map\n// 인수로 사용하는 콜백에 내부에서 반환하는 하나의 데이터를 가지고\n// 그 데이터드를 모아놓은 새로운 데이터를 만들어 반환한다. 원본 데이터의 변환 없이.\n// const a = fruits.forEach(function (fruit, index) {\n//   console.log(`${fruit} - ${index}`)\n// })\n// console.log(a)\n\n// const b = fruits.map(function (fruit, index){\n//   // return `${fruit} - ${index}`\n//   return {\n//   id: index,\n//   name: fruit\n//   }\n// })\n// console.log(b)\n\n\n\n// 화살표 함수 사용 \n// const a = fruits.forEach( (fruit, index) => {\n//   console.log(`${fruit} - ${index}`)\n// })\n// console.log(a)\n\n// const b = fruits.map( (fruit, index) => ({\n//   id: index,\n//   name: fruit\n//   }))\n// console.log(b)\n\n\n\n// .filter()\n// 배열데이터 안에 들어있는 각각의 아이템들을 특정한 기준에 의해서 필터링을 한다\n// 원본데이터의 변화없이 필터된 새로운 데이터를 반환한다\n// \n// const a = numbers.map(number => number < 3)\n// console.log(a)\n// const b = numbers.filter(number => number < 3)\n// console.log(b)\n\n\n\n// .find() findIndex()\n// .find() 콜백 내에서 몬가를 찾으면 반복이 멈춘다. 그 찾아진 배열의 아이템이 반환이된다.\n// .findIndex() 찾아진 배열의 index 반환\n// const a = fruits.find(function(fruit){\n//   return /^C/.test(fruit)\n// })\n// console.log(a)\n// const b = fruits.findIndex(fruit =>  /^C/.test(fruit))\n// console.log(b)\n\n\n\n// .includes()\n// 배열데이터 부분에 인수로사용된 특정한데이터가 포함이 되어있는지 확인하는메소드\n// const a = numbers.includes(3)\n// console.log(a)\n// const b = fruits.includes('Dong')\n// console.log(b)\n\n\n\n// .push() .unshift()\n// 원본 수정됨 주의!!!\n// .push() 사용되는 배열에 가장 뒤에 특정한 인수 내용을 밀어 넣는다.\n// .unshift() 사용되는 배열에 가장 앞에 특정한 인수 내용을 밀어 넣는다.\n// numbers.push(5)\n// console.log(numbers)\n// numbers.unshift(0)\n// console.log(numbers)\n\n\n\n// .reverse()\n// 원본 수정됨 주의!\n// 배열데이터를 거꾸로 뒤집는다.\n// numbers.reverse()\n// fruits.reverse()\n// console.log(numbers)\n// console.log(fruits)\n\n\n\n// .splice()\n// 원본 수정됨 주의!\n\n// 첫번째 인수 번호에서 아이템 두번째인수만큼 지워라\n// numbers.splice(2, 1)\n// 인덱스 번호 2번에서 아이템을 1개만 지워라\n\n// numbers.splice(2, 0, 999)\n// 인덱스 번호 2번에서 아이템을 0개만 지워라(변환없음),그리고 999를 끼워넣어라\n\n//특정한 인덱스 번호의 아이템을 제거하는 용도로도 사용되는데 그 자리에다가 끼워넣는 용도로 \n// 사용도 가능하다\n\n// console.log(numbers)\n\n// fruits.splice(2, 0, 'dong')\n// console.log(fruits)"},"lineCount":null}},"error":null,"hash":"7df2e16897e71d854ee5f2f85361ea37","cacheData":{"env":{}}}